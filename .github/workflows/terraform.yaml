name: "Terraform Build"

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: true 


      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform_scripts fmt  -check 

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform_scripts init 
      
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform_scripts validate  -no-color 

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=terraform_scripts plan  -no-color -input=false 
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: terraform_apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform  -chdir=terraform_scripts apply  -auto-approve -input=false 


      - name: Get Terraform Outputs
        id: terraform_variable 
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          Output=$(terraform -chdir=terraform_scripts output web-address)
          echo "Output=$(terraform -chdir=terraform_scripts  output web-address)" >> $GITHUB_ENV 

      - name: Echo Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: echo "${{ env.Output }}"


